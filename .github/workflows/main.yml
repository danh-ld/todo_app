name: flutter drive

on: [push, pull_request]

jobs:
  drive:
    # Creates a build matrix for your jobs. You can define different
    # variations of an environment to run each job in.
    strategy:
      # A set of different configurations of the virtual environment.
      matrix:
        device:
        - "iPhone 14 Pro Max"
        - "iPad Air (5th generation)"
        # - "iPhone 11 Pro Max (13.1)"
      # When set to true, GitHub cancels all in-progress jobs if any matrix job
      # fails.
      fail-fast: true
    # The type of machine to run the job on.
    runs-on: macOS-latest
    # Contains a sequence of tasks.
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: "Install flutter"
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.10.3'
        channel: 'stable'
        cache: true
        cache-key: flutter-3.10.3
        cache-path: ${{ runner.tool_cache }}/flutter-3.10.3

    - name: flutter pub get
      run: flutter pub get
    
    - name: Install CocoaPods
      run: sudo gem install cocoapods
    - name: Install Pods
      run: cd ios && pod install

    - name: Set latest Xcode version
      run: |
        echo "Available Xcode versions:"
        XCODE_PATH=$(ls /Applications | grep Xcode | sort -V | tail -n 1)
        echo "Selected Xcode version: $XCODE_PATH"
        sudo xcode-select -switch /Applications/$XCODE_PATH/Contents/Developer

    - name: Print Xcode version
      run: xcodebuild -version

    - name: List devices
      run: xcrun simctl list devices | grep -v "Unavailable" | grep -v "unavailable"
        
    - name: "Start Simulator"
      run: |
        UUID=$(xcrun simctl list devices | grep -v "Unavailable" | grep -v "unavailable" | grep "${{ matrix.device }}" | awk -F '[()]' '{print $(NF-3)}')
        echo $UUID
        xcrun simctl boot $UUID
        open -a Simulator

    - name: "Run Flutter Driver tests"
      # run: "flutter drive --target=test_driver/app.dart"
      run: "bash flutter_drive.sh"
